// question link --  https://leetcode.com/problems/shortest-unsorted-continuous-subarray/description/


//solution :--

class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        vector<int> tmp = nums;
        sort(tmp.begin(),tmp.end());
        int i=0,j=tmp.size()-1;
        while(i<tmp.size() && tmp[i]==nums[i])
            i++;
        while(j>=0 && tmp[j]==nums[j])
            j--;
        if(i>j)
            return 0;
        return j-i+1;
    }
};

//solution 2

int findUnsortedSubarray(vector<int>& nums) {
        int leastSoFar = INT_MAX, left = 0, right = 0;
        int n = nums.size();
	   for(int i = n - 1; i >= 0; i--){
	       leastSoFar = min(leastSoFar, nums[i]);
	       if(leastSoFar != nums[i]){
	           left = i;
	       }
	   }
	   int maxSoFar = INT_MIN;
	   for(int i = 0; i < n; i++){
	       maxSoFar = max(maxSoFar, nums[i]);
	       if(maxSoFar != nums[i]){
	           right = i;
	       }
	   }
	   return right == left ? 0 : right - left + 1; 
    }
